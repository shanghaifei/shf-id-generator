# api版本：此值必须在kubectl api-versions中
apiVersion: apps/v1
# 资源类型
kind: Deployment
# 元数据
metadata:
  # 资源的名字，在同一个namespace中必须唯一
  name: shf-id-generator-server
  # 指定部署在哪个namespace中
  namespace: dev
  # 设定资源的标签
  labels:
      app: shf-id-generator-server
      version: stable
# 资源规范
spec:
  # 副本数量
  replicas: 3
  # 保留历史版本
  revisionHistoryLimit: 5
  # 选择器
  selector:
    # 匹配标签
    matchLabels:
      app: shf-id-generator-server
      version: stable
  # 策略
  strategy:
      # 滚动更新
      rollingUpdate:
        # 最大额外可以存在的副本数，可以为百分比，也可以为整数
        maxSurge: 30%
        # 表示示在更新过程中能够进入不可用状态的Pod的最大值，可以为百分比，也可以为整数
        maxUnavailable: 30%
      # 策略类型
      type: RollingUpdate
  # 模板
  template:
    # 元数据
    metadata:
      # 名称
      name: shf-id-generator-server
      # 标签
      labels:
        app: shf-id-generator-server
        version: stable
    # 资源规范
    spec:
#       hostAliases:
#         - ip: "127.0.0.1"
#           hostnames:
#             - "app1.hyfetech.com"
#             - "app2.hyfetech.com"
#             - "app3.hyfetech.com"
      # 容器配置
      containers:
          # 容器名称
        - name: shf-id-generator-server
          # env配置
          env:
            - name: JAVA_OPTS
              value: "-Xmx500m -Xms500m"
          # 镜像地址
          image: shf-id-generator-server:1.0.0
          # 镜像拉取策略
          # 每次Pod启动拉取镜像策略，三个选择 Always、Never、IfNotPresent
          # Always：每次都检查、Never：每次都不检查（不管本地是否有）、IfNotPresent：如果本地有就不检查，如果没有就拉取
          imagePullPolicy: IfNotPresent
          # 存活探针
          livenessProbe:
            # 通过http get方式进行检查
            httpGet:
              path: /actuator/health
              port: 9192
            initialDelaySeconds: 10 # 设置第一次检测在容器启动后多长时间后开始
            timeoutSeconds: 5 # 检测的超时时间
            periodSeconds: 10 # 检查间隔时间
            successThreshold: 1 # 成功门槛
            failureThreshold: 5 # 失败门槛，连接失败5次，pod杀掉，重启一个新的pod
          # 就绪探针
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 9192
            initialDelaySeconds: 10 # 设置第一次检测在容器启动后多长时间后开始
            timeoutSeconds: 5 # 检测的超时时间
            periodSeconds: 10 # 检查间隔时间
            successThreshold: 1 # 成功门槛
            failureThreshold: 5 # 失败门槛，连接失败5次，pod杀掉，重启一个新的pod
          # 端口
          ports:
            - containerPort: 9192
          # 资源
          resources:
            # 最大使用
            limits:
              # CPU，1核心 = 1000m
              cpu: "0.5"
              # 内存，1G = 1024Mi
              memory: "500Mi"
            # 容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行
            requests:
              cpu: "0.1"
              memory: "100Mi"
          # 卷挂载
          volumeMounts:
            - name: logdir
              mountPath: /logs
            - name: localtime
              mountPath: /etc/localtime
            - name: timezone
              mountPath: /etc/timezone
      # 镜像仓库拉取密钥
      imagePullSecrets:
        - name: harbor
      # 亲和性调试
      affinity:
          # 节点亲和力
          nodeAffinity:
            # pod必须部署到满足条件的节点上
            requiredDuringSchedulingIgnoredDuringExecution:
              # 节点满足任何一个条件就可以
              nodeSelectorTerms:
              # 有多个选项，则只有同时满足这些逻辑选项的节点才能运行 pod
              - matchExpressions:
                - key: beta.kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
      # 数据卷
      volumes:
        - name: logdir
          emptyDir: {}
        - name: localtime
          hostPath:
            path: /etc/localtime
        - name: timezone
          hostPath:
            path: /etc/timezone